  public FormularioVentasTO GetFormularioVentas(string idUsuario, string idFormulario)
    {
        FormularioVentasTO formVentas;
        string sqlQuery;
        SqlParameter []sqlParams;

        formVentas = null;
 
 try
        {
            sqlQuery = "sp_ConsultarSolicitud @idUsuario, @idSolicitud, codError";

            sqlParams = new SqlParameter[]
            {
                new SqlParameter { ParameterName = "@idUsuario",  Value =idUsuario , Direction = System.Data.ParameterDirection.Input},
                new SqlParameter { ParameterName = "@idSolicitud",  Value =idFormulario, Direction = System.Data.ParameterDirection.Input },
                new SqlParameter { ParameterName = "@codError",  Value =-99, Direction = System.Data.ParameterDirection.Output },
            };

            using (PortalFinandinaPriv dbContext = new PortalFinandinaPriv())
            {
                formVentas = dbContext.Database.SqlQuery<FormularioVentasTO>(sqlQuery, sqlParams).SingleOrDefault();
            }
        }
        catch (Exception ex)
        {
            //handle, Log or throw exception 
        }
		}
		........................................................................................................................
    CREATE PROCEDURE [dbo].[GetResultsForCampaign]  
    @ClientId int   
    AS
    BEGIN
    SET NOCOUNT ON;

    SELECT AgeGroup, Gender, Payout
    FROM IntegrationResult
    WHERE ClientId = @ClientId
    END

create a class that looks like:

    public class ResultForCampaign
    {
        public string AgeGroup { get; set; }

        public string Gender { get; set; }

        public decimal Payout { get; set; }
    }

and then call the procedure by doing the following:

    using(var context = new DatabaseContext())
    {
            var clientIdParameter = new SqlParameter("@ClientId", 4);

            var result = context.Database
                .SqlQuery<ResultForCampaign>("GetResultsForCampaign @ClientId", clientIdParameter)
                .ToList();
    }
